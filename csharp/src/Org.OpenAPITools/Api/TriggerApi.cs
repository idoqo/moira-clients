/* 
 * Moira Alert
 *
 * This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>
 *
 * The version of the OpenAPI document: 2.5.1.48
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITriggerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create new trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 CreateTrigger (Trigger trigger);

        /// <summary>
        /// create new trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> CreateTriggerWithHttpInfo (Trigger trigger);
        /// <summary>
        /// remove a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns></returns>
        void DeleteTrigger (Guid triggerID);

        /// <summary>
        /// remove a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTriggerWithHttpInfo (Guid triggerID);
        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns></returns>
        void DeleteTriggerMetric (Guid triggerID, string name);

        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTriggerMetricWithHttpInfo (Guid triggerID, string name);
        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns></returns>
        void DeleteTriggerNoDataMetrics (Guid triggerID);

        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTriggerNoDataMetricsWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Deletes throttling for a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns></returns>
        void DeleteTriggerThrottling (Guid triggerID);

        /// <summary>
        /// Deletes throttling for a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTriggerThrottlingWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Get an existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Trigger</returns>
        Trigger GetTrigger (Guid triggerID);

        /// <summary>
        /// Get an existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Trigger</returns>
        ApiResponse<Trigger> GetTriggerWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Get metrics associated with certain trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        Dictionary<string, List<Object>> GetTriggerMetrics (Guid triggerID, string from = default(string), string to = default(string));

        /// <summary>
        /// Get metrics associated with certain trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<Object>>> GetTriggerMetricsWithHttpInfo (Guid triggerID, string from = default(string), string to = default(string));
        /// <summary>
        /// Get rendered plot for trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetTriggerPlot (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string));

        /// <summary>
        /// Get rendered plot for trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetTriggerPlotWithHttpInfo (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string));
        /// <summary>
        /// Get the trigger state as at last check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>TriggerCheck</returns>
        TriggerCheck GetTriggerState (Guid triggerID);

        /// <summary>
        /// Get the trigger state as at last check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of TriggerCheck</returns>
        ApiResponse<TriggerCheck> GetTriggerStateWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetTriggerThrottling (Guid triggerID);

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetTriggerThrottlingWithHttpInfo (Guid triggerID);
        /// <summary>
        /// get all triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetTriggers ();

        /// <summary>
        /// get all triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetTriggersWithHttpInfo ();
        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 SearchTriggers (string text, bool? onlyProblems = default(bool?), int? page = default(int?));

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> SearchTriggersWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?));
        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 SearchTriggersPage (string text, bool? onlyProblems = default(bool?), int? page = default(int?));

        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> SearchTriggersPageWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?));
        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns></returns>
        void SetTriggerMaintenance (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetTriggerMaintenanceWithHttpInfo (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Update existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 UpdateTrigger (Guid triggerID, Trigger trigger);

        /// <summary>
        /// Update existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> UpdateTriggerWithHttpInfo (Guid triggerID, Trigger trigger);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create new trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> CreateTriggerAsync (Trigger trigger);

        /// <summary>
        /// create new trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> CreateTriggerAsyncWithHttpInfo (Trigger trigger);
        /// <summary>
        /// remove a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTriggerAsync (Guid triggerID);

        /// <summary>
        /// remove a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerAsyncWithHttpInfo (Guid triggerID);
        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTriggerMetricAsync (Guid triggerID, string name);

        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerMetricAsyncWithHttpInfo (Guid triggerID, string name);
        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTriggerNoDataMetricsAsync (Guid triggerID);

        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerNoDataMetricsAsyncWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Deletes throttling for a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTriggerThrottlingAsync (Guid triggerID);

        /// <summary>
        /// Deletes throttling for a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerThrottlingAsyncWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Get an existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of Trigger</returns>
        System.Threading.Tasks.Task<Trigger> GetTriggerAsync (Guid triggerID);

        /// <summary>
        /// Get an existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse (Trigger)</returns>
        System.Threading.Tasks.Task<ApiResponse<Trigger>> GetTriggerAsyncWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Get metrics associated with certain trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<Object>>> GetTriggerMetricsAsync (Guid triggerID, string from = default(string), string to = default(string));

        /// <summary>
        /// Get metrics associated with certain trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<Object>>>> GetTriggerMetricsAsyncWithHttpInfo (Guid triggerID, string from = default(string), string to = default(string));
        /// <summary>
        /// Get rendered plot for trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetTriggerPlotAsync (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string));

        /// <summary>
        /// Get rendered plot for trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTriggerPlotAsyncWithHttpInfo (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string));
        /// <summary>
        /// Get the trigger state as at last check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of TriggerCheck</returns>
        System.Threading.Tasks.Task<TriggerCheck> GetTriggerStateAsync (Guid triggerID);

        /// <summary>
        /// Get the trigger state as at last check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse (TriggerCheck)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggerCheck>> GetTriggerStateAsyncWithHttpInfo (Guid triggerID);
        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetTriggerThrottlingAsync (Guid triggerID);

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetTriggerThrottlingAsyncWithHttpInfo (Guid triggerID);
        /// <summary>
        /// get all triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetTriggersAsync ();

        /// <summary>
        /// get all triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetTriggersAsyncWithHttpInfo ();
        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> SearchTriggersAsync (string text, bool? onlyProblems = default(bool?), int? page = default(int?));

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> SearchTriggersAsyncWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?));
        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> SearchTriggersPageAsync (string text, bool? onlyProblems = default(bool?), int? page = default(int?));

        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> SearchTriggersPageAsyncWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?));
        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetTriggerMaintenanceAsync (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);

        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetTriggerMaintenanceAsyncWithHttpInfo (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE);
        /// <summary>
        /// Update existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> UpdateTriggerAsync (Guid triggerID, Trigger trigger);

        /// <summary>
        /// Update existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> UpdateTriggerAsyncWithHttpInfo (Guid triggerID, Trigger trigger);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TriggerApi : ITriggerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TriggerApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerApi"/> class
        /// </summary>
        /// <returns></returns>
        public TriggerApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TriggerApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create new trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 CreateTrigger (Trigger trigger)
        {
             ApiResponse<InlineResponse2009> localVarResponse = CreateTriggerWithHttpInfo(trigger);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create new trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> CreateTriggerWithHttpInfo (Trigger trigger)
        {
            // verify the required parameter 'trigger' is set
            if (trigger == null)
                throw new ApiException(400, "Missing required parameter 'trigger' when calling TriggerApi->CreateTrigger");

            var localVarPath = "/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trigger != null && trigger.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trigger); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trigger; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// create new trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> CreateTriggerAsync (Trigger trigger)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await CreateTriggerAsyncWithHttpInfo(trigger);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create new trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trigger"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> CreateTriggerAsyncWithHttpInfo (Trigger trigger)
        {
            // verify the required parameter 'trigger' is set
            if (trigger == null)
                throw new ApiException(400, "Missing required parameter 'trigger' when calling TriggerApi->CreateTrigger");

            var localVarPath = "/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (trigger != null && trigger.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trigger); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trigger; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// remove a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns></returns>
        public void DeleteTrigger (Guid triggerID)
        {
             DeleteTriggerWithHttpInfo(triggerID);
        }

        /// <summary>
        /// remove a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTriggerWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTrigger");

            var localVarPath = "/trigger/{triggerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// remove a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTriggerAsync (Guid triggerID)
        {
             await DeleteTriggerAsyncWithHttpInfo(triggerID);

        }

        /// <summary>
        /// remove a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerAsyncWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTrigger");

            var localVarPath = "/trigger/{triggerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns></returns>
        public void DeleteTriggerMetric (Guid triggerID, string name)
        {
             DeleteTriggerMetricWithHttpInfo(triggerID, name);
        }

        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTriggerMetricWithHttpInfo (Guid triggerID, string name)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTriggerMetric");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TriggerApi->DeleteTriggerMetric");

            var localVarPath = "/trigger/{triggerID}/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTriggerMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTriggerMetricAsync (Guid triggerID, string name)
        {
             await DeleteTriggerMetricAsyncWithHttpInfo(triggerID, name);

        }

        /// <summary>
        /// deletes metric from last check and all trigger pattern metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="name">Name of the target metric</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerMetricAsyncWithHttpInfo (Guid triggerID, string name)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTriggerMetric");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling TriggerApi->DeleteTriggerMetric");

            var localVarPath = "/trigger/{triggerID}/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTriggerMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns></returns>
        public void DeleteTriggerNoDataMetrics (Guid triggerID)
        {
             DeleteTriggerNoDataMetricsWithHttpInfo(triggerID);
        }

        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTriggerNoDataMetricsWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTriggerNoDataMetrics");

            var localVarPath = "/trigger/{triggerID}/metrics/nodata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTriggerNoDataMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTriggerNoDataMetricsAsync (Guid triggerID)
        {
             await DeleteTriggerNoDataMetricsAsyncWithHttpInfo(triggerID);

        }

        /// <summary>
        /// deletes all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerNoDataMetricsAsyncWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTriggerNoDataMetrics");

            var localVarPath = "/trigger/{triggerID}/metrics/nodata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTriggerNoDataMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes throttling for a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns></returns>
        public void DeleteTriggerThrottling (Guid triggerID)
        {
             DeleteTriggerThrottlingWithHttpInfo(triggerID);
        }

        /// <summary>
        /// Deletes throttling for a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTriggerThrottlingWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTriggerThrottling");

            var localVarPath = "/trigger/{triggerID}/throttling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTriggerThrottling", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes throttling for a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTriggerThrottlingAsync (Guid triggerID)
        {
             await DeleteTriggerThrottlingAsyncWithHttpInfo(triggerID);

        }

        /// <summary>
        /// Deletes throttling for a trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTriggerThrottlingAsyncWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->DeleteTriggerThrottling");

            var localVarPath = "/trigger/{triggerID}/throttling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTriggerThrottling", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Trigger</returns>
        public Trigger GetTrigger (Guid triggerID)
        {
             ApiResponse<Trigger> localVarResponse = GetTriggerWithHttpInfo(triggerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of Trigger</returns>
        public ApiResponse<Trigger> GetTriggerWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTrigger");

            var localVarPath = "/trigger/{triggerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Trigger>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Trigger) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Trigger)));
        }

        /// <summary>
        /// Get an existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of Trigger</returns>
        public async System.Threading.Tasks.Task<Trigger> GetTriggerAsync (Guid triggerID)
        {
             ApiResponse<Trigger> localVarResponse = await GetTriggerAsyncWithHttpInfo(triggerID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse (Trigger)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Trigger>> GetTriggerAsyncWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTrigger");

            var localVarPath = "/trigger/{triggerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Trigger>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Trigger) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Trigger)));
        }

        /// <summary>
        /// Get metrics associated with certain trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        public Dictionary<string, List<Object>> GetTriggerMetrics (Guid triggerID, string from = default(string), string to = default(string))
        {
             ApiResponse<Dictionary<string, List<Object>>> localVarResponse = GetTriggerMetricsWithHttpInfo(triggerID, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metrics associated with certain trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        public ApiResponse<Dictionary<string, List<Object>>> GetTriggerMetricsWithHttpInfo (Guid triggerID, string from = default(string), string to = default(string))
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerMetrics");

            var localVarPath = "/trigger/{triggerID}/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<Object>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, List<Object>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<Object>>)));
        }

        /// <summary>
        /// Get metrics associated with certain trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<Object>>> GetTriggerMetricsAsync (Guid triggerID, string from = default(string), string to = default(string))
        {
             ApiResponse<Dictionary<string, List<Object>>> localVarResponse = await GetTriggerMetricsAsyncWithHttpInfo(triggerID, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metrics associated with certain trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<Object>>>> GetTriggerMetricsAsyncWithHttpInfo (Guid triggerID, string from = default(string), string to = default(string))
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerMetrics");

            var localVarPath = "/trigger/{triggerID}/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<Object>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, List<Object>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<Object>>)));
        }

        /// <summary>
        /// Get rendered plot for trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetTriggerPlot (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetTriggerPlotWithHttpInfo(triggerID, targetID, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get rendered plot for trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetTriggerPlotWithHttpInfo (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string))
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerPlot");

            var localVarPath = "/trigger/{triggerID}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (targetID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetID", targetID)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerPlot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get rendered plot for trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetTriggerPlotAsync (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetTriggerPlotAsyncWithHttpInfo(triggerID, targetID, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get rendered plot for trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="targetID">The ID of updated target to print plot for (optional)</param>
        /// <param name="from">The start period of metrics to get (optional)</param>
        /// <param name="to">The end period of metrics to get (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetTriggerPlotAsyncWithHttpInfo (Guid triggerID, string targetID = default(string), string from = default(string), string to = default(string))
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerPlot");

            var localVarPath = "/trigger/{triggerID}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (targetID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "targetID", targetID)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerPlot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get the trigger state as at last check 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>TriggerCheck</returns>
        public TriggerCheck GetTriggerState (Guid triggerID)
        {
             ApiResponse<TriggerCheck> localVarResponse = GetTriggerStateWithHttpInfo(triggerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the trigger state as at last check 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of TriggerCheck</returns>
        public ApiResponse<TriggerCheck> GetTriggerStateWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerState");

            var localVarPath = "/trigger/{triggerID}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerCheck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TriggerCheck) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerCheck)));
        }

        /// <summary>
        /// Get the trigger state as at last check 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of TriggerCheck</returns>
        public async System.Threading.Tasks.Task<TriggerCheck> GetTriggerStateAsync (Guid triggerID)
        {
             ApiResponse<TriggerCheck> localVarResponse = await GetTriggerStateAsyncWithHttpInfo(triggerID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the trigger state as at last check 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse (TriggerCheck)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TriggerCheck>> GetTriggerStateAsyncWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerState");

            var localVarPath = "/trigger/{triggerID}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TriggerCheck>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TriggerCheck) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TriggerCheck)));
        }

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetTriggerThrottling (Guid triggerID)
        {
             ApiResponse<InlineResponse20011> localVarResponse = GetTriggerThrottlingWithHttpInfo(triggerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> GetTriggerThrottlingWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerThrottling");

            var localVarPath = "/trigger/{triggerID}/throttling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerThrottling", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> GetTriggerThrottlingAsync (Guid triggerID)
        {
             ApiResponse<InlineResponse20011> localVarResponse = await GetTriggerThrottlingAsyncWithHttpInfo(triggerID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetTriggerThrottlingAsyncWithHttpInfo (Guid triggerID)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->GetTriggerThrottling");

            var localVarPath = "/trigger/{triggerID}/throttling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggerThrottling", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// get all triggers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetTriggers ()
        {
             ApiResponse<InlineResponse2008> localVarResponse = GetTriggersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// get all triggers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> GetTriggersWithHttpInfo ()
        {

            var localVarPath = "/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// get all triggers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetTriggersAsync ()
        {
             ApiResponse<InlineResponse2008> localVarResponse = await GetTriggersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// get all triggers 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetTriggersAsyncWithHttpInfo ()
        {

            var localVarPath = "/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 SearchTriggers (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
             ApiResponse<InlineResponse20010> localVarResponse = SearchTriggersWithHttpInfo(text, onlyProblems, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse<InlineResponse20010> SearchTriggersWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TriggerApi->SearchTriggers");

            var localVarPath = "/trigger/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (onlyProblems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyProblems", onlyProblems)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> SearchTriggersAsync (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
             ApiResponse<InlineResponse20010> localVarResponse = await SearchTriggersAsyncWithHttpInfo(text, onlyProblems, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> SearchTriggersAsyncWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TriggerApi->SearchTriggers");

            var localVarPath = "/trigger/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (onlyProblems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyProblems", onlyProblems)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTriggers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 SearchTriggersPage (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
             ApiResponse<InlineResponse20010> localVarResponse = SearchTriggersPageWithHttpInfo(text, onlyProblems, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse<InlineResponse20010> SearchTriggersPageWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TriggerApi->SearchTriggersPage");

            var localVarPath = "/trigger/page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (onlyProblems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyProblems", onlyProblems)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTriggersPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> SearchTriggersPageAsync (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
             ApiResponse<InlineResponse20010> localVarResponse = await SearchTriggersPageAsyncWithHttpInfo(text, onlyProblems, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search triggers. Deprecated, use the &#x60;search&#x60; endpoint instead 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">query to perform a search for</param>
        /// <param name="onlyProblems">Restricts the result to errors only (optional)</param>
        /// <param name="page">Defines the number of the displayed page. E.g, page&#x3D;2 would display the 2nd page. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> SearchTriggersPageAsyncWithHttpInfo (string text, bool? onlyProblems = default(bool?), int? page = default(int?))
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TriggerApi->SearchTriggersPage");

            var localVarPath = "/trigger/page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (onlyProblems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyProblems", onlyProblems)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTriggersPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns></returns>
        public void SetTriggerMaintenance (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             SetTriggerMaintenanceWithHttpInfo(triggerID, UNKNOWN_BASE_TYPE);
        }

        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetTriggerMaintenanceWithHttpInfo (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->SetTriggerMaintenance");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling TriggerApi->SetTriggerMaintenance");

            var localVarPath = "/trigger/{triggerID}/setMaintenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetTriggerMaintenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetTriggerMaintenanceAsync (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
             await SetTriggerMaintenanceAsyncWithHttpInfo(triggerID, UNKNOWN_BASE_TYPE);

        }

        /// <summary>
        /// sets metrics and the trigger itself to maintenance mode 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="UNKNOWN_BASE_TYPE"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetTriggerMaintenanceAsyncWithHttpInfo (Guid triggerID, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->SetTriggerMaintenance");
            // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
            if (UNKNOWN_BASE_TYPE == null)
                throw new ApiException(400, "Missing required parameter 'UNKNOWN_BASE_TYPE' when calling TriggerApi->SetTriggerMaintenance");

            var localVarPath = "/trigger/{triggerID}/setMaintenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (UNKNOWN_BASE_TYPE != null && UNKNOWN_BASE_TYPE.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(UNKNOWN_BASE_TYPE); // http body (model) parameter
            }
            else
            {
                localVarPostBody = UNKNOWN_BASE_TYPE; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetTriggerMaintenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 UpdateTrigger (Guid triggerID, Trigger trigger)
        {
             ApiResponse<InlineResponse2009> localVarResponse = UpdateTriggerWithHttpInfo(triggerID, trigger);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> UpdateTriggerWithHttpInfo (Guid triggerID, Trigger trigger)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->UpdateTrigger");
            // verify the required parameter 'trigger' is set
            if (trigger == null)
                throw new ApiException(400, "Missing required parameter 'trigger' when calling TriggerApi->UpdateTrigger");

            var localVarPath = "/trigger/{triggerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (trigger != null && trigger.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trigger); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trigger; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Update existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> UpdateTriggerAsync (Guid triggerID, Trigger trigger)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await UpdateTriggerAsyncWithHttpInfo(triggerID, trigger);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing trigger 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="trigger"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> UpdateTriggerAsyncWithHttpInfo (Guid triggerID, Trigger trigger)
        {
            // verify the required parameter 'triggerID' is set
            if (triggerID == null)
                throw new ApiException(400, "Missing required parameter 'triggerID' when calling TriggerApi->UpdateTrigger");
            // verify the required parameter 'trigger' is set
            if (trigger == null)
                throw new ApiException(400, "Missing required parameter 'trigger' when calling TriggerApi->UpdateTrigger");

            var localVarPath = "/trigger/{triggerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html",
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (triggerID != null) localVarPathParams.Add("triggerID", this.Configuration.ApiClient.ParameterToString(triggerID)); // path parameter
            if (trigger != null && trigger.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trigger); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trigger; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTrigger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

    }
}
