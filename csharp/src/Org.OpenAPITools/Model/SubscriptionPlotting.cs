/* 
 * Moira Alert
 *
 * This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>
 *
 * The version of the OpenAPI document: 2.5.1.48
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SubscriptionPlotting
    /// </summary>
    [DataContract]
    public partial class SubscriptionPlotting :  IEquatable<SubscriptionPlotting>, IValidatableObject
    {
        /// <summary>
        /// Theme of the chart. Should be either &#39;light&#39; or &#39;dark&#39;
        /// </summary>
        /// <value>Theme of the chart. Should be either &#39;light&#39; or &#39;dark&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThemeEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            [EnumMember(Value = "light")]
            Light = 1,

            /// <summary>
            /// Enum Dark for value: dark
            /// </summary>
            [EnumMember(Value = "dark")]
            Dark = 2

        }

        /// <summary>
        /// Theme of the chart. Should be either &#39;light&#39; or &#39;dark&#39;
        /// </summary>
        /// <value>Theme of the chart. Should be either &#39;light&#39; or &#39;dark&#39;</value>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public ThemeEnum? Theme { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlotting" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="theme">Theme of the chart. Should be either &#39;light&#39; or &#39;dark&#39;.</param>
        public SubscriptionPlotting(bool enabled = default(bool), ThemeEnum? theme = default(ThemeEnum?))
        {
            this.Enabled = enabled;
            this.Theme = theme;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionPlotting {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionPlotting);
        }

        /// <summary>
        /// Returns true if SubscriptionPlotting instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionPlotting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionPlotting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
