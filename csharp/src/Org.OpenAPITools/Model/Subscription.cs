/* 
 * Moira Alert
 *
 * This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>
 *
 * The version of the OpenAPI document: 2.5.1.48
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Subscription
    /// </summary>
    [DataContract]
    public partial class Subscription :  IEquatable<Subscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="contacts">ID of contacts that are part of this subscription.</param>
        /// <param name="tags">The tags for this subscription.</param>
        /// <param name="sched">sched.</param>
        /// <param name="plotting">plotting.</param>
        /// <param name="id">ID of this subscription.</param>
        /// <param name="enabled">If false, notifications due for thsi subscription will not be sent.</param>
        /// <param name="anyTags">anyTags.</param>
        /// <param name="ignoreWarnings">If true, notifications will not be sent for warning values..</param>
        /// <param name="ignoreRecoverings">ignoreRecoverings.</param>
        /// <param name="throttling">throttling.</param>
        /// <param name="user">ID of the user that created the subscription.</param>
        public Subscription(List<Guid> contacts = default(List<Guid>), List<string> tags = default(List<string>), SubscriptionSched sched = default(SubscriptionSched), SubscriptionPlotting plotting = default(SubscriptionPlotting), string id = default(string), bool enabled = default(bool), bool anyTags = default(bool), bool ignoreWarnings = default(bool), bool ignoreRecoverings = default(bool), bool throttling = default(bool), string user = default(string))
        {
            this.Contacts = contacts;
            this.Tags = tags;
            this.Sched = sched;
            this.Plotting = plotting;
            this.Id = id;
            this.Enabled = enabled;
            this.AnyTags = anyTags;
            this.IgnoreWarnings = ignoreWarnings;
            this.IgnoreRecoverings = ignoreRecoverings;
            this.Throttling = throttling;
            this.User = user;
        }
        
        /// <summary>
        /// ID of contacts that are part of this subscription
        /// </summary>
        /// <value>ID of contacts that are part of this subscription</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<Guid> Contacts { get; set; }

        /// <summary>
        /// The tags for this subscription
        /// </summary>
        /// <value>The tags for this subscription</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Sched
        /// </summary>
        [DataMember(Name="sched", EmitDefaultValue=false)]
        public SubscriptionSched Sched { get; set; }

        /// <summary>
        /// Gets or Sets Plotting
        /// </summary>
        [DataMember(Name="plotting", EmitDefaultValue=false)]
        public SubscriptionPlotting Plotting { get; set; }

        /// <summary>
        /// ID of this subscription
        /// </summary>
        /// <value>ID of this subscription</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// If false, notifications due for thsi subscription will not be sent
        /// </summary>
        /// <value>If false, notifications due for thsi subscription will not be sent</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets AnyTags
        /// </summary>
        [DataMember(Name="any_tags", EmitDefaultValue=false)]
        public bool AnyTags { get; set; }

        /// <summary>
        /// If true, notifications will not be sent for warning values.
        /// </summary>
        /// <value>If true, notifications will not be sent for warning values.</value>
        [DataMember(Name="ignore_warnings", EmitDefaultValue=false)]
        public bool IgnoreWarnings { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreRecoverings
        /// </summary>
        [DataMember(Name="ignore_recoverings", EmitDefaultValue=false)]
        public bool IgnoreRecoverings { get; set; }

        /// <summary>
        /// Gets or Sets Throttling
        /// </summary>
        [DataMember(Name="throttling", EmitDefaultValue=false)]
        public bool Throttling { get; set; }

        /// <summary>
        /// ID of the user that created the subscription
        /// </summary>
        /// <value>ID of the user that created the subscription</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Sched: ").Append(Sched).Append("\n");
            sb.Append("  Plotting: ").Append(Plotting).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AnyTags: ").Append(AnyTags).Append("\n");
            sb.Append("  IgnoreWarnings: ").Append(IgnoreWarnings).Append("\n");
            sb.Append("  IgnoreRecoverings: ").Append(IgnoreRecoverings).Append("\n");
            sb.Append("  Throttling: ").Append(Throttling).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Subscription);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    input.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Sched == input.Sched ||
                    (this.Sched != null &&
                    this.Sched.Equals(input.Sched))
                ) && 
                (
                    this.Plotting == input.Plotting ||
                    (this.Plotting != null &&
                    this.Plotting.Equals(input.Plotting))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.AnyTags == input.AnyTags ||
                    (this.AnyTags != null &&
                    this.AnyTags.Equals(input.AnyTags))
                ) && 
                (
                    this.IgnoreWarnings == input.IgnoreWarnings ||
                    (this.IgnoreWarnings != null &&
                    this.IgnoreWarnings.Equals(input.IgnoreWarnings))
                ) && 
                (
                    this.IgnoreRecoverings == input.IgnoreRecoverings ||
                    (this.IgnoreRecoverings != null &&
                    this.IgnoreRecoverings.Equals(input.IgnoreRecoverings))
                ) && 
                (
                    this.Throttling == input.Throttling ||
                    (this.Throttling != null &&
                    this.Throttling.Equals(input.Throttling))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Sched != null)
                    hashCode = hashCode * 59 + this.Sched.GetHashCode();
                if (this.Plotting != null)
                    hashCode = hashCode * 59 + this.Plotting.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.AnyTags != null)
                    hashCode = hashCode * 59 + this.AnyTags.GetHashCode();
                if (this.IgnoreWarnings != null)
                    hashCode = hashCode * 59 + this.IgnoreWarnings.GetHashCode();
                if (this.IgnoreRecoverings != null)
                    hashCode = hashCode * 59 + this.IgnoreRecoverings.GetHashCode();
                if (this.Throttling != null)
                    hashCode = hashCode * 59 + this.Throttling.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
