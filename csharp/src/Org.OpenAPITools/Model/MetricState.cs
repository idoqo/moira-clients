/* 
 * Moira Alert
 *
 * This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>
 *
 * The version of the OpenAPI document: 2.5.1.48
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MetricState
    /// </summary>
    [DataContract]
    public partial class MetricState :  IEquatable<MetricState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricState" /> class.
        /// </summary>
        /// <param name="eventTimestamp">eventTimestamp.</param>
        /// <param name="state">state.</param>
        /// <param name="suppressed">suppressed.</param>
        /// <param name="suppressedState">suppressedState.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="value">value.</param>
        /// <param name="maintenance">maintenance.</param>
        /// <param name="maintenanceInfo">maintenanceInfo.</param>
        public MetricState(int eventTimestamp = default(int), string state = default(string), bool suppressed = default(bool), string suppressedState = default(string), int timestamp = default(int), decimal value = default(decimal), int maintenance = default(int), MaintenanceInfo maintenanceInfo = default(MaintenanceInfo))
        {
            this.EventTimestamp = eventTimestamp;
            this.State = state;
            this.Suppressed = suppressed;
            this.SuppressedState = suppressedState;
            this.Timestamp = timestamp;
            this.Value = value;
            this.Maintenance = maintenance;
            this.MaintenanceInfo = maintenanceInfo;
        }
        
        /// <summary>
        /// Gets or Sets EventTimestamp
        /// </summary>
        [DataMember(Name="event_timestamp", EmitDefaultValue=false)]
        public int EventTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Suppressed
        /// </summary>
        [DataMember(Name="suppressed", EmitDefaultValue=false)]
        public bool Suppressed { get; set; }

        /// <summary>
        /// Gets or Sets SuppressedState
        /// </summary>
        [DataMember(Name="suppressed_state", EmitDefaultValue=false)]
        public string SuppressedState { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets or Sets Maintenance
        /// </summary>
        [DataMember(Name="maintenance", EmitDefaultValue=false)]
        public int Maintenance { get; set; }

        /// <summary>
        /// Gets or Sets MaintenanceInfo
        /// </summary>
        [DataMember(Name="maintenance_info", EmitDefaultValue=false)]
        public MaintenanceInfo MaintenanceInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricState {\n");
            sb.Append("  EventTimestamp: ").Append(EventTimestamp).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Suppressed: ").Append(Suppressed).Append("\n");
            sb.Append("  SuppressedState: ").Append(SuppressedState).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("  MaintenanceInfo: ").Append(MaintenanceInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetricState);
        }

        /// <summary>
        /// Returns true if MetricState instances are equal
        /// </summary>
        /// <param name="input">Instance of MetricState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventTimestamp == input.EventTimestamp ||
                    (this.EventTimestamp != null &&
                    this.EventTimestamp.Equals(input.EventTimestamp))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Suppressed == input.Suppressed ||
                    (this.Suppressed != null &&
                    this.Suppressed.Equals(input.Suppressed))
                ) && 
                (
                    this.SuppressedState == input.SuppressedState ||
                    (this.SuppressedState != null &&
                    this.SuppressedState.Equals(input.SuppressedState))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Maintenance == input.Maintenance ||
                    (this.Maintenance != null &&
                    this.Maintenance.Equals(input.Maintenance))
                ) && 
                (
                    this.MaintenanceInfo == input.MaintenanceInfo ||
                    (this.MaintenanceInfo != null &&
                    this.MaintenanceInfo.Equals(input.MaintenanceInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventTimestamp != null)
                    hashCode = hashCode * 59 + this.EventTimestamp.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Suppressed != null)
                    hashCode = hashCode * 59 + this.Suppressed.GetHashCode();
                if (this.SuppressedState != null)
                    hashCode = hashCode * 59 + this.SuppressedState.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Maintenance != null)
                    hashCode = hashCode * 59 + this.Maintenance.GetHashCode();
                if (this.MaintenanceInfo != null)
                    hashCode = hashCode * 59 + this.MaintenanceInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
