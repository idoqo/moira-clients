/* 
 * Moira Alert
 *
 * This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>
 *
 * The version of the OpenAPI document: 2.5.1.48
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotificationsListList
    /// </summary>
    [DataContract]
    public partial class NotificationsListList :  IEquatable<NotificationsListList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsListList" /> class.
        /// </summary>
        /// <param name="_event">_event.</param>
        /// <param name="trigger">trigger.</param>
        /// <param name="contact">contact.</param>
        /// <param name="plotting">plotting.</param>
        /// <param name="throttled">boolean flag to check if a notification is throttled or not.</param>
        /// <param name="sendFail">count of failed attempts to send the notification.</param>
        /// <param name="timestamp">unix timestamp of the time the notification was created.</param>
        public NotificationsListList(Event _event = default(Event), Trigger trigger = default(Trigger), Contact contact = default(Contact), NotificationsListPlotting plotting = default(NotificationsListPlotting), bool throttled = default(bool), int sendFail = default(int), int timestamp = default(int))
        {
            this.Event = _event;
            this.Trigger = trigger;
            this.Contact = contact;
            this.Plotting = plotting;
            this.Throttled = throttled;
            this.SendFail = sendFail;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public Event Event { get; set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public Trigger Trigger { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or Sets Plotting
        /// </summary>
        [DataMember(Name="plotting", EmitDefaultValue=false)]
        public NotificationsListPlotting Plotting { get; set; }

        /// <summary>
        /// boolean flag to check if a notification is throttled or not
        /// </summary>
        /// <value>boolean flag to check if a notification is throttled or not</value>
        [DataMember(Name="throttled", EmitDefaultValue=false)]
        public bool Throttled { get; set; }

        /// <summary>
        /// count of failed attempts to send the notification
        /// </summary>
        /// <value>count of failed attempts to send the notification</value>
        [DataMember(Name="send_fail", EmitDefaultValue=false)]
        public int SendFail { get; set; }

        /// <summary>
        /// unix timestamp of the time the notification was created
        /// </summary>
        /// <value>unix timestamp of the time the notification was created</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationsListList {\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Plotting: ").Append(Plotting).Append("\n");
            sb.Append("  Throttled: ").Append(Throttled).Append("\n");
            sb.Append("  SendFail: ").Append(SendFail).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationsListList);
        }

        /// <summary>
        /// Returns true if NotificationsListList instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationsListList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationsListList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.Plotting == input.Plotting ||
                    (this.Plotting != null &&
                    this.Plotting.Equals(input.Plotting))
                ) && 
                (
                    this.Throttled == input.Throttled ||
                    (this.Throttled != null &&
                    this.Throttled.Equals(input.Throttled))
                ) && 
                (
                    this.SendFail == input.SendFail ||
                    (this.SendFail != null &&
                    this.SendFail.Equals(input.SendFail))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.Plotting != null)
                    hashCode = hashCode * 59 + this.Plotting.GetHashCode();
                if (this.Throttled != null)
                    hashCode = hashCode * 59 + this.Throttled.GetHashCode();
                if (this.SendFail != null)
                    hashCode = hashCode * 59 + this.SendFail.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
