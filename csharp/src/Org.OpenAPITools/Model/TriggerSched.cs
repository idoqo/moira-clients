/* 
 * Moira Alert
 *
 * This is an API description for Moira Alert project. Please check https://github.com/moira-alert
 *
 * The version of the OpenAPI document: 2.5.1.47
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TriggerSched
    /// </summary>
    [DataContract]
    public partial class TriggerSched :  IEquatable<TriggerSched>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerSched" /> class.
        /// </summary>
        /// <param name="days">days.</param>
        /// <param name="endOffset">endOffset.</param>
        /// <param name="startOffset">startOffset.</param>
        /// <param name="tzOffset">tzOffset.</param>
        public TriggerSched(List<TriggerSchedDays> days = default(List<TriggerSchedDays>), int endOffset = default(int), int startOffset = default(int), int tzOffset = default(int))
        {
            this.Days = days;
            this.EndOffset = endOffset;
            this.StartOffset = startOffset;
            this.TzOffset = tzOffset;
        }
        
        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public List<TriggerSchedDays> Days { get; set; }

        /// <summary>
        /// Gets or Sets EndOffset
        /// </summary>
        [DataMember(Name="endOffset", EmitDefaultValue=false)]
        public int EndOffset { get; set; }

        /// <summary>
        /// Gets or Sets StartOffset
        /// </summary>
        [DataMember(Name="startOffset", EmitDefaultValue=false)]
        public int StartOffset { get; set; }

        /// <summary>
        /// Gets or Sets TzOffset
        /// </summary>
        [DataMember(Name="tzOffset", EmitDefaultValue=false)]
        public int TzOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TriggerSched {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  EndOffset: ").Append(EndOffset).Append("\n");
            sb.Append("  StartOffset: ").Append(StartOffset).Append("\n");
            sb.Append("  TzOffset: ").Append(TzOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TriggerSched);
        }

        /// <summary>
        /// Returns true if TriggerSched instances are equal
        /// </summary>
        /// <param name="input">Instance of TriggerSched to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TriggerSched input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Days == input.Days ||
                    this.Days != null &&
                    input.Days != null &&
                    this.Days.SequenceEqual(input.Days)
                ) && 
                (
                    this.EndOffset == input.EndOffset ||
                    (this.EndOffset != null &&
                    this.EndOffset.Equals(input.EndOffset))
                ) && 
                (
                    this.StartOffset == input.StartOffset ||
                    (this.StartOffset != null &&
                    this.StartOffset.Equals(input.StartOffset))
                ) && 
                (
                    this.TzOffset == input.TzOffset ||
                    (this.TzOffset != null &&
                    this.TzOffset.Equals(input.TzOffset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.EndOffset != null)
                    hashCode = hashCode * 59 + this.EndOffset.GetHashCode();
                if (this.StartOffset != null)
                    hashCode = hashCode * 59 + this.StartOffset.GetHashCode();
                if (this.TzOffset != null)
                    hashCode = hashCode * 59 + this.TzOffset.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
