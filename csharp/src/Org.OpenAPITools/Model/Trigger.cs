/* 
 * Moira Alert
 *
 * This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>
 *
 * The version of the OpenAPI document: 2.5.1.48
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Trigger
    /// </summary>
    [DataContract]
    public partial class Trigger :  IEquatable<Trigger>, IValidatableObject
    {
        /// <summary>
        /// Value is either &#39;rising&#39; or &#39;falling&#39;. Dictates when alerts are sent for &#x60;warn_value&#x60; and &#x60;error_value&#x60;
        /// </summary>
        /// <value>Value is either &#39;rising&#39; or &#39;falling&#39;. Dictates when alerts are sent for &#x60;warn_value&#x60; and &#x60;error_value&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerTypeEnum
        {
            /// <summary>
            /// Enum Rising for value: rising
            /// </summary>
            [EnumMember(Value = "rising")]
            Rising = 1,

            /// <summary>
            /// Enum Falling for value: falling
            /// </summary>
            [EnumMember(Value = "falling")]
            Falling = 2

        }

        /// <summary>
        /// Value is either &#39;rising&#39; or &#39;falling&#39;. Dictates when alerts are sent for &#x60;warn_value&#x60; and &#x60;error_value&#x60;
        /// </summary>
        /// <value>Value is either &#39;rising&#39; or &#39;falling&#39;. Dictates when alerts are sent for &#x60;warn_value&#x60; and &#x60;error_value&#x60;</value>
        [DataMember(Name="trigger_type", EmitDefaultValue=false)]
        public TriggerTypeEnum? TriggerType { get; set; }
        /// <summary>
        /// state to put the metric in if Moira doesn&#39;t receive new data for it from graphite. See &lt;https://moira.readthedocs.io/en/latest/development/architecture.html?highlight&#x3D;ttl#state/&gt;
        /// </summary>
        /// <value>state to put the metric in if Moira doesn&#39;t receive new data for it from graphite. See &lt;https://moira.readthedocs.io/en/latest/development/architecture.html?highlight&#x3D;ttl#state/&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TtlStateEnum
        {
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,

            /// <summary>
            /// Enum WARN for value: WARN
            /// </summary>
            [EnumMember(Value = "WARN")]
            WARN = 2,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 3,

            /// <summary>
            /// Enum NODATA for value: NODATA
            /// </summary>
            [EnumMember(Value = "NODATA")]
            NODATA = 4,

            /// <summary>
            /// Enum EXCEPTION for value: EXCEPTION
            /// </summary>
            [EnumMember(Value = "EXCEPTION")]
            EXCEPTION = 5

        }

        /// <summary>
        /// state to put the metric in if Moira doesn&#39;t receive new data for it from graphite. See &lt;https://moira.readthedocs.io/en/latest/development/architecture.html?highlight&#x3D;ttl#state/&gt;
        /// </summary>
        /// <value>state to put the metric in if Moira doesn&#39;t receive new data for it from graphite. See &lt;https://moira.readthedocs.io/en/latest/development/architecture.html?highlight&#x3D;ttl#state/&gt;</value>
        [DataMember(Name="ttl_state", EmitDefaultValue=true)]
        public TtlStateEnum TtlState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Trigger" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Trigger() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Trigger" /> class.
        /// </summary>
        /// <param name="id">ID of the trigger.</param>
        /// <param name="name">name of the trigger (required).</param>
        /// <param name="desc">informative description of the trigger (required).</param>
        /// <param name="targets">graphite metric to cause this trigger.</param>
        /// <param name="warnValue">value at which Moira should send a WARNING alert.</param>
        /// <param name="errorValue">value at which Moira should send an ERROR alert (required).</param>
        /// <param name="triggerType">Value is either &#39;rising&#39; or &#39;falling&#39;. Dictates when alerts are sent for &#x60;warn_value&#x60; and &#x60;error_value&#x60;.</param>
        /// <param name="tags">the tags associated with this trigger. New tags are automatically created.</param>
        /// <param name="ttlState">state to put the metric in if Moira doesn&#39;t receive new data for it from graphite. See &lt;https://moira.readthedocs.io/en/latest/development/architecture.html?highlight&#x3D;ttl#state/&gt; (required).</param>
        /// <param name="ttl">number of seconds to wait for metric update from Graphite before changing the metric state (required).</param>
        /// <param name="sched">sched.</param>
        /// <param name="expression">expression.</param>
        /// <param name="patterns">optional Graphite pattern is a single dot-separated metric name, possibly containing one or more wildcards.</param>
        /// <param name="isRemote">dictates if trigger should be added to Graphite instead of Redis. See &lt;https://moira.readthedocs.io/en/latest/installation/configuration.html#remote-triggers-checker/&gt;.</param>
        /// <param name="muteNewMetrics">if true, Moira will notify you each time the metric state changes, e.g NODATA -&gt; OK (required).</param>
        /// <param name="throttling">See &lt;https://moira.readthedocs.io/en/latest/user_guide/throttling.html/&gt;.</param>
        public Trigger(Guid id = default(Guid), string name = default(string), string desc = default(string), List<string> targets = default(List<string>), int warnValue = default(int), int errorValue = default(int), TriggerTypeEnum? triggerType = default(TriggerTypeEnum?), List<string> tags = default(List<string>), TtlStateEnum ttlState = default(TtlStateEnum), int ttl = default(int), SubscriptionSched sched = default(SubscriptionSched), string expression = default(string), List<string> patterns = default(List<string>), bool isRemote = default(bool), bool muteNewMetrics = default(bool), int throttling = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Trigger and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "desc" is required (not null)
            if (desc == null)
            {
                throw new InvalidDataException("desc is a required property for Trigger and cannot be null");
            }
            else
            {
                this.Desc = desc;
            }
            
            // to ensure "errorValue" is required (not null)
            if (errorValue == null)
            {
                throw new InvalidDataException("errorValue is a required property for Trigger and cannot be null");
            }
            else
            {
                this.ErrorValue = errorValue;
            }
            
            // to ensure "ttlState" is required (not null)
            if (ttlState == null)
            {
                throw new InvalidDataException("ttlState is a required property for Trigger and cannot be null");
            }
            else
            {
                this.TtlState = ttlState;
            }
            
            // to ensure "ttl" is required (not null)
            if (ttl == null)
            {
                throw new InvalidDataException("ttl is a required property for Trigger and cannot be null");
            }
            else
            {
                this.Ttl = ttl;
            }
            
            // to ensure "muteNewMetrics" is required (not null)
            if (muteNewMetrics == null)
            {
                throw new InvalidDataException("muteNewMetrics is a required property for Trigger and cannot be null");
            }
            else
            {
                this.MuteNewMetrics = muteNewMetrics;
            }
            
            this.Id = id;
            this.Targets = targets;
            this.WarnValue = warnValue;
            this.TriggerType = triggerType;
            this.Tags = tags;
            this.Sched = sched;
            this.Expression = expression;
            this.Patterns = patterns;
            this.IsRemote = isRemote;
            this.Throttling = throttling;
        }
        
        /// <summary>
        /// ID of the trigger
        /// </summary>
        /// <value>ID of the trigger</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// name of the trigger
        /// </summary>
        /// <value>name of the trigger</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// informative description of the trigger
        /// </summary>
        /// <value>informative description of the trigger</value>
        [DataMember(Name="desc", EmitDefaultValue=true)]
        public string Desc { get; set; }

        /// <summary>
        /// graphite metric to cause this trigger
        /// </summary>
        /// <value>graphite metric to cause this trigger</value>
        [DataMember(Name="targets", EmitDefaultValue=false)]
        public List<string> Targets { get; set; }

        /// <summary>
        /// value at which Moira should send a WARNING alert
        /// </summary>
        /// <value>value at which Moira should send a WARNING alert</value>
        [DataMember(Name="warn_value", EmitDefaultValue=false)]
        public int WarnValue { get; set; }

        /// <summary>
        /// value at which Moira should send an ERROR alert
        /// </summary>
        /// <value>value at which Moira should send an ERROR alert</value>
        [DataMember(Name="error_value", EmitDefaultValue=true)]
        public int ErrorValue { get; set; }


        /// <summary>
        /// the tags associated with this trigger. New tags are automatically created
        /// </summary>
        /// <value>the tags associated with this trigger. New tags are automatically created</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }


        /// <summary>
        /// number of seconds to wait for metric update from Graphite before changing the metric state
        /// </summary>
        /// <value>number of seconds to wait for metric update from Graphite before changing the metric state</value>
        [DataMember(Name="ttl", EmitDefaultValue=true)]
        public int Ttl { get; set; }

        /// <summary>
        /// Gets or Sets Sched
        /// </summary>
        [DataMember(Name="sched", EmitDefaultValue=false)]
        public SubscriptionSched Sched { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public string Expression { get; set; }

        /// <summary>
        /// optional Graphite pattern is a single dot-separated metric name, possibly containing one or more wildcards
        /// </summary>
        /// <value>optional Graphite pattern is a single dot-separated metric name, possibly containing one or more wildcards</value>
        [DataMember(Name="patterns", EmitDefaultValue=false)]
        public List<string> Patterns { get; set; }

        /// <summary>
        /// dictates if trigger should be added to Graphite instead of Redis. See &lt;https://moira.readthedocs.io/en/latest/installation/configuration.html#remote-triggers-checker/&gt;
        /// </summary>
        /// <value>dictates if trigger should be added to Graphite instead of Redis. See &lt;https://moira.readthedocs.io/en/latest/installation/configuration.html#remote-triggers-checker/&gt;</value>
        [DataMember(Name="is_remote", EmitDefaultValue=false)]
        public bool IsRemote { get; set; }

        /// <summary>
        /// if true, Moira will notify you each time the metric state changes, e.g NODATA -&gt; OK
        /// </summary>
        /// <value>if true, Moira will notify you each time the metric state changes, e.g NODATA -&gt; OK</value>
        [DataMember(Name="mute_new_metrics", EmitDefaultValue=true)]
        public bool MuteNewMetrics { get; set; }

        /// <summary>
        /// See &lt;https://moira.readthedocs.io/en/latest/user_guide/throttling.html/&gt;
        /// </summary>
        /// <value>See &lt;https://moira.readthedocs.io/en/latest/user_guide/throttling.html/&gt;</value>
        [DataMember(Name="throttling", EmitDefaultValue=false)]
        public int Throttling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trigger {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  WarnValue: ").Append(WarnValue).Append("\n");
            sb.Append("  ErrorValue: ").Append(ErrorValue).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TtlState: ").Append(TtlState).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  Sched: ").Append(Sched).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("  IsRemote: ").Append(IsRemote).Append("\n");
            sb.Append("  MuteNewMetrics: ").Append(MuteNewMetrics).Append("\n");
            sb.Append("  Throttling: ").Append(Throttling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Trigger);
        }

        /// <summary>
        /// Returns true if Trigger instances are equal
        /// </summary>
        /// <param name="input">Instance of Trigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trigger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    input.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                ) && 
                (
                    this.WarnValue == input.WarnValue ||
                    (this.WarnValue != null &&
                    this.WarnValue.Equals(input.WarnValue))
                ) && 
                (
                    this.ErrorValue == input.ErrorValue ||
                    (this.ErrorValue != null &&
                    this.ErrorValue.Equals(input.ErrorValue))
                ) && 
                (
                    this.TriggerType == input.TriggerType ||
                    (this.TriggerType != null &&
                    this.TriggerType.Equals(input.TriggerType))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TtlState == input.TtlState ||
                    (this.TtlState != null &&
                    this.TtlState.Equals(input.TtlState))
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    (this.Ttl != null &&
                    this.Ttl.Equals(input.Ttl))
                ) && 
                (
                    this.Sched == input.Sched ||
                    (this.Sched != null &&
                    this.Sched.Equals(input.Sched))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                ) && 
                (
                    this.Patterns == input.Patterns ||
                    this.Patterns != null &&
                    input.Patterns != null &&
                    this.Patterns.SequenceEqual(input.Patterns)
                ) && 
                (
                    this.IsRemote == input.IsRemote ||
                    (this.IsRemote != null &&
                    this.IsRemote.Equals(input.IsRemote))
                ) && 
                (
                    this.MuteNewMetrics == input.MuteNewMetrics ||
                    (this.MuteNewMetrics != null &&
                    this.MuteNewMetrics.Equals(input.MuteNewMetrics))
                ) && 
                (
                    this.Throttling == input.Throttling ||
                    (this.Throttling != null &&
                    this.Throttling.Equals(input.Throttling))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Desc != null)
                    hashCode = hashCode * 59 + this.Desc.GetHashCode();
                if (this.Targets != null)
                    hashCode = hashCode * 59 + this.Targets.GetHashCode();
                if (this.WarnValue != null)
                    hashCode = hashCode * 59 + this.WarnValue.GetHashCode();
                if (this.ErrorValue != null)
                    hashCode = hashCode * 59 + this.ErrorValue.GetHashCode();
                if (this.TriggerType != null)
                    hashCode = hashCode * 59 + this.TriggerType.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.TtlState != null)
                    hashCode = hashCode * 59 + this.TtlState.GetHashCode();
                if (this.Ttl != null)
                    hashCode = hashCode * 59 + this.Ttl.GetHashCode();
                if (this.Sched != null)
                    hashCode = hashCode * 59 + this.Sched.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.Patterns != null)
                    hashCode = hashCode * 59 + this.Patterns.GetHashCode();
                if (this.IsRemote != null)
                    hashCode = hashCode * 59 + this.IsRemote.GetHashCode();
                if (this.MuteNewMetrics != null)
                    hashCode = hashCode * 59 + this.MuteNewMetrics.GetHashCode();
                if (this.Throttling != null)
                    hashCode = hashCode * 59 + this.Throttling.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
