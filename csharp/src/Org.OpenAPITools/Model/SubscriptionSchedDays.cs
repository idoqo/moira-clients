/* 
 * Moira Alert
 *
 * This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>
 *
 * The version of the OpenAPI document: 2.5.1.48
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SubscriptionSchedDays
    /// </summary>
    [DataContract]
    public partial class SubscriptionSchedDays :  IEquatable<SubscriptionSchedDays>, IValidatableObject
    {
        /// <summary>
        /// Shortened name of the weekday
        /// </summary>
        /// <value>Shortened name of the weekday</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum Mon for value: Mon
            /// </summary>
            [EnumMember(Value = "Mon")]
            Mon = 1,

            /// <summary>
            /// Enum Tue for value: Tue
            /// </summary>
            [EnumMember(Value = "Tue")]
            Tue = 2,

            /// <summary>
            /// Enum Wed for value: Wed
            /// </summary>
            [EnumMember(Value = "Wed")]
            Wed = 3,

            /// <summary>
            /// Enum Thu for value: Thu
            /// </summary>
            [EnumMember(Value = "Thu")]
            Thu = 4,

            /// <summary>
            /// Enum Fri for value: Fri
            /// </summary>
            [EnumMember(Value = "Fri")]
            Fri = 5,

            /// <summary>
            /// Enum Sat for value: Sat
            /// </summary>
            [EnumMember(Value = "Sat")]
            Sat = 6,

            /// <summary>
            /// Enum Sun for value: Sun
            /// </summary>
            [EnumMember(Value = "Sun")]
            Sun = 7

        }

        /// <summary>
        /// Shortened name of the weekday
        /// </summary>
        /// <value>Shortened name of the weekday</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionSchedDays" /> class.
        /// </summary>
        /// <param name="enabled">Indicates if notifications should be sent on this day of the week..</param>
        /// <param name="name">Shortened name of the weekday.</param>
        public SubscriptionSchedDays(bool enabled = default(bool), NameEnum? name = default(NameEnum?))
        {
            this.Enabled = enabled;
            this.Name = name;
        }
        
        /// <summary>
        /// Indicates if notifications should be sent on this day of the week.
        /// </summary>
        /// <value>Indicates if notifications should be sent on this day of the week.</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionSchedDays {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionSchedDays);
        }

        /// <summary>
        /// Returns true if SubscriptionSchedDays instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionSchedDays to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionSchedDays input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
