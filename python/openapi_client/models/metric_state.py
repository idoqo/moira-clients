# coding: utf-8

"""
    Moira Alert

    This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>  # noqa: E501

    The version of the OpenAPI document: 2.5.1.48
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MetricState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_timestamp': 'int',
        'state': 'str',
        'suppressed': 'bool',
        'suppressed_state': 'str',
        'timestamp': 'int',
        'value': 'float',
        'maintenance': 'int',
        'maintenance_info': 'MaintenanceInfo'
    }

    attribute_map = {
        'event_timestamp': 'event_timestamp',
        'state': 'state',
        'suppressed': 'suppressed',
        'suppressed_state': 'suppressed_state',
        'timestamp': 'timestamp',
        'value': 'value',
        'maintenance': 'maintenance',
        'maintenance_info': 'maintenance_info'
    }

    def __init__(self, event_timestamp=None, state=None, suppressed=None, suppressed_state=None, timestamp=None, value=None, maintenance=None, maintenance_info=None, local_vars_configuration=None):  # noqa: E501
        """MetricState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event_timestamp = None
        self._state = None
        self._suppressed = None
        self._suppressed_state = None
        self._timestamp = None
        self._value = None
        self._maintenance = None
        self._maintenance_info = None
        self.discriminator = None

        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if state is not None:
            self.state = state
        if suppressed is not None:
            self.suppressed = suppressed
        if suppressed_state is not None:
            self.suppressed_state = suppressed_state
        if timestamp is not None:
            self.timestamp = timestamp
        if value is not None:
            self.value = value
        if maintenance is not None:
            self.maintenance = maintenance
        if maintenance_info is not None:
            self.maintenance_info = maintenance_info

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this MetricState.  # noqa: E501


        :return: The event_timestamp of this MetricState.  # noqa: E501
        :rtype: int
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this MetricState.


        :param event_timestamp: The event_timestamp of this MetricState.  # noqa: E501
        :type: int
        """

        self._event_timestamp = event_timestamp

    @property
    def state(self):
        """Gets the state of this MetricState.  # noqa: E501


        :return: The state of this MetricState.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MetricState.


        :param state: The state of this MetricState.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def suppressed(self):
        """Gets the suppressed of this MetricState.  # noqa: E501


        :return: The suppressed of this MetricState.  # noqa: E501
        :rtype: bool
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this MetricState.


        :param suppressed: The suppressed of this MetricState.  # noqa: E501
        :type: bool
        """

        self._suppressed = suppressed

    @property
    def suppressed_state(self):
        """Gets the suppressed_state of this MetricState.  # noqa: E501


        :return: The suppressed_state of this MetricState.  # noqa: E501
        :rtype: str
        """
        return self._suppressed_state

    @suppressed_state.setter
    def suppressed_state(self, suppressed_state):
        """Sets the suppressed_state of this MetricState.


        :param suppressed_state: The suppressed_state of this MetricState.  # noqa: E501
        :type: str
        """

        self._suppressed_state = suppressed_state

    @property
    def timestamp(self):
        """Gets the timestamp of this MetricState.  # noqa: E501


        :return: The timestamp of this MetricState.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MetricState.


        :param timestamp: The timestamp of this MetricState.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def value(self):
        """Gets the value of this MetricState.  # noqa: E501


        :return: The value of this MetricState.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricState.


        :param value: The value of this MetricState.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def maintenance(self):
        """Gets the maintenance of this MetricState.  # noqa: E501


        :return: The maintenance of this MetricState.  # noqa: E501
        :rtype: int
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this MetricState.


        :param maintenance: The maintenance of this MetricState.  # noqa: E501
        :type: int
        """

        self._maintenance = maintenance

    @property
    def maintenance_info(self):
        """Gets the maintenance_info of this MetricState.  # noqa: E501


        :return: The maintenance_info of this MetricState.  # noqa: E501
        :rtype: MaintenanceInfo
        """
        return self._maintenance_info

    @maintenance_info.setter
    def maintenance_info(self, maintenance_info):
        """Sets the maintenance_info of this MetricState.


        :param maintenance_info: The maintenance_info of this MetricState.  # noqa: E501
        :type: MaintenanceInfo
        """

        self._maintenance_info = maintenance_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetricState):
            return True

        return self.to_dict() != other.to_dict()
