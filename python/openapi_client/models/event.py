# coding: utf-8

"""
    Moira Alert

    This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>  # noqa: E501

    The version of the OpenAPI document: 2.5.1.48
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trigger_event': 'bool',
        'timestamp': 'int',
        'metric': 'str',
        'value': 'float',
        'state': 'str',
        'trigger_id': 'str',
        'sub_id': 'str',
        'contact_id': 'str',
        'old_state': 'str',
        'msg': 'str',
        'event_message': 'EventEventMessage'
    }

    attribute_map = {
        'trigger_event': 'trigger_event',
        'timestamp': 'timestamp',
        'metric': 'metric',
        'value': 'value',
        'state': 'state',
        'trigger_id': 'trigger_id',
        'sub_id': 'sub_id',
        'contact_id': 'contactId',
        'old_state': 'old_state',
        'msg': 'msg',
        'event_message': 'event_message'
    }

    def __init__(self, trigger_event=None, timestamp=None, metric=None, value=None, state=None, trigger_id=None, sub_id=None, contact_id=None, old_state=None, msg=None, event_message=None, local_vars_configuration=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._trigger_event = None
        self._timestamp = None
        self._metric = None
        self._value = None
        self._state = None
        self._trigger_id = None
        self._sub_id = None
        self._contact_id = None
        self._old_state = None
        self._msg = None
        self._event_message = None
        self.discriminator = None

        if trigger_event is not None:
            self.trigger_event = trigger_event
        if timestamp is not None:
            self.timestamp = timestamp
        if metric is not None:
            self.metric = metric
        if value is not None:
            self.value = value
        if state is not None:
            self.state = state
        if trigger_id is not None:
            self.trigger_id = trigger_id
        if sub_id is not None:
            self.sub_id = sub_id
        if contact_id is not None:
            self.contact_id = contact_id
        if old_state is not None:
            self.old_state = old_state
        if msg is not None:
            self.msg = msg
        if event_message is not None:
            self.event_message = event_message

    @property
    def trigger_event(self):
        """Gets the trigger_event of this Event.  # noqa: E501


        :return: The trigger_event of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this Event.


        :param trigger_event: The trigger_event of this Event.  # noqa: E501
        :type: bool
        """

        self._trigger_event = trigger_event

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.  # noqa: E501


        :return: The timestamp of this Event.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.


        :param timestamp: The timestamp of this Event.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def metric(self):
        """Gets the metric of this Event.  # noqa: E501


        :return: The metric of this Event.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Event.


        :param metric: The metric of this Event.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def value(self):
        """Gets the value of this Event.  # noqa: E501


        :return: The value of this Event.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Event.


        :param value: The value of this Event.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def state(self):
        """Gets the state of this Event.  # noqa: E501

        State of the metric after the data point was recorded. Should be one of OK, WARN, ERROR, NODATA, EXCEPTION or TEST.  # noqa: E501

        :return: The state of this Event.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.

        State of the metric after the data point was recorded. Should be one of OK, WARN, ERROR, NODATA, EXCEPTION or TEST.  # noqa: E501

        :param state: The state of this Event.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def trigger_id(self):
        """Gets the trigger_id of this Event.  # noqa: E501


        :return: The trigger_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """Sets the trigger_id of this Event.


        :param trigger_id: The trigger_id of this Event.  # noqa: E501
        :type: str
        """

        self._trigger_id = trigger_id

    @property
    def sub_id(self):
        """Gets the sub_id of this Event.  # noqa: E501


        :return: The sub_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this Event.


        :param sub_id: The sub_id of this Event.  # noqa: E501
        :type: str
        """

        self._sub_id = sub_id

    @property
    def contact_id(self):
        """Gets the contact_id of this Event.  # noqa: E501


        :return: The contact_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this Event.


        :param contact_id: The contact_id of this Event.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def old_state(self):
        """Gets the old_state of this Event.  # noqa: E501

        State of the metric before the data point was recorded.  # noqa: E501

        :return: The old_state of this Event.  # noqa: E501
        :rtype: str
        """
        return self._old_state

    @old_state.setter
    def old_state(self, old_state):
        """Sets the old_state of this Event.

        State of the metric before the data point was recorded.  # noqa: E501

        :param old_state: The old_state of this Event.  # noqa: E501
        :type: str
        """

        self._old_state = old_state

    @property
    def msg(self):
        """Gets the msg of this Event.  # noqa: E501


        :return: The msg of this Event.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this Event.


        :param msg: The msg of this Event.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def event_message(self):
        """Gets the event_message of this Event.  # noqa: E501


        :return: The event_message of this Event.  # noqa: E501
        :rtype: EventEventMessage
        """
        return self._event_message

    @event_message.setter
    def event_message(self, event_message):
        """Sets the event_message of this Event.


        :param event_message: The event_message of this Event.  # noqa: E501
        :type: EventEventMessage
        """

        self._event_message = event_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
