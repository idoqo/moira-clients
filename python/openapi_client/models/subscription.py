# coding: utf-8

"""
    Moira Alert

    This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>  # noqa: E501

    The version of the OpenAPI document: 2.5.1.48
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Subscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contacts': 'list[str]',
        'tags': 'list[str]',
        'sched': 'SubscriptionSched',
        'plotting': 'SubscriptionPlotting',
        'id': 'str',
        'enabled': 'bool',
        'any_tags': 'bool',
        'ignore_warnings': 'bool',
        'ignore_recoverings': 'bool',
        'throttling': 'bool',
        'user': 'str'
    }

    attribute_map = {
        'contacts': 'contacts',
        'tags': 'tags',
        'sched': 'sched',
        'plotting': 'plotting',
        'id': 'id',
        'enabled': 'enabled',
        'any_tags': 'any_tags',
        'ignore_warnings': 'ignore_warnings',
        'ignore_recoverings': 'ignore_recoverings',
        'throttling': 'throttling',
        'user': 'user'
    }

    def __init__(self, contacts=None, tags=None, sched=None, plotting=None, id=None, enabled=None, any_tags=None, ignore_warnings=None, ignore_recoverings=None, throttling=None, user=None, local_vars_configuration=None):  # noqa: E501
        """Subscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contacts = None
        self._tags = None
        self._sched = None
        self._plotting = None
        self._id = None
        self._enabled = None
        self._any_tags = None
        self._ignore_warnings = None
        self._ignore_recoverings = None
        self._throttling = None
        self._user = None
        self.discriminator = None

        if contacts is not None:
            self.contacts = contacts
        if tags is not None:
            self.tags = tags
        if sched is not None:
            self.sched = sched
        if plotting is not None:
            self.plotting = plotting
        if id is not None:
            self.id = id
        if enabled is not None:
            self.enabled = enabled
        if any_tags is not None:
            self.any_tags = any_tags
        if ignore_warnings is not None:
            self.ignore_warnings = ignore_warnings
        if ignore_recoverings is not None:
            self.ignore_recoverings = ignore_recoverings
        if throttling is not None:
            self.throttling = throttling
        if user is not None:
            self.user = user

    @property
    def contacts(self):
        """Gets the contacts of this Subscription.  # noqa: E501

        ID of contacts that are part of this subscription  # noqa: E501

        :return: The contacts of this Subscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Subscription.

        ID of contacts that are part of this subscription  # noqa: E501

        :param contacts: The contacts of this Subscription.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    @property
    def tags(self):
        """Gets the tags of this Subscription.  # noqa: E501

        The tags for this subscription  # noqa: E501

        :return: The tags of this Subscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Subscription.

        The tags for this subscription  # noqa: E501

        :param tags: The tags of this Subscription.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def sched(self):
        """Gets the sched of this Subscription.  # noqa: E501


        :return: The sched of this Subscription.  # noqa: E501
        :rtype: SubscriptionSched
        """
        return self._sched

    @sched.setter
    def sched(self, sched):
        """Sets the sched of this Subscription.


        :param sched: The sched of this Subscription.  # noqa: E501
        :type: SubscriptionSched
        """

        self._sched = sched

    @property
    def plotting(self):
        """Gets the plotting of this Subscription.  # noqa: E501


        :return: The plotting of this Subscription.  # noqa: E501
        :rtype: SubscriptionPlotting
        """
        return self._plotting

    @plotting.setter
    def plotting(self, plotting):
        """Sets the plotting of this Subscription.


        :param plotting: The plotting of this Subscription.  # noqa: E501
        :type: SubscriptionPlotting
        """

        self._plotting = plotting

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501

        ID of this subscription  # noqa: E501

        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        ID of this subscription  # noqa: E501

        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def enabled(self):
        """Gets the enabled of this Subscription.  # noqa: E501

        If false, notifications due for thsi subscription will not be sent  # noqa: E501

        :return: The enabled of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Subscription.

        If false, notifications due for thsi subscription will not be sent  # noqa: E501

        :param enabled: The enabled of this Subscription.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def any_tags(self):
        """Gets the any_tags of this Subscription.  # noqa: E501


        :return: The any_tags of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._any_tags

    @any_tags.setter
    def any_tags(self, any_tags):
        """Sets the any_tags of this Subscription.


        :param any_tags: The any_tags of this Subscription.  # noqa: E501
        :type: bool
        """

        self._any_tags = any_tags

    @property
    def ignore_warnings(self):
        """Gets the ignore_warnings of this Subscription.  # noqa: E501

        If true, notifications will not be sent for warning values.  # noqa: E501

        :return: The ignore_warnings of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_warnings

    @ignore_warnings.setter
    def ignore_warnings(self, ignore_warnings):
        """Sets the ignore_warnings of this Subscription.

        If true, notifications will not be sent for warning values.  # noqa: E501

        :param ignore_warnings: The ignore_warnings of this Subscription.  # noqa: E501
        :type: bool
        """

        self._ignore_warnings = ignore_warnings

    @property
    def ignore_recoverings(self):
        """Gets the ignore_recoverings of this Subscription.  # noqa: E501


        :return: The ignore_recoverings of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_recoverings

    @ignore_recoverings.setter
    def ignore_recoverings(self, ignore_recoverings):
        """Sets the ignore_recoverings of this Subscription.


        :param ignore_recoverings: The ignore_recoverings of this Subscription.  # noqa: E501
        :type: bool
        """

        self._ignore_recoverings = ignore_recoverings

    @property
    def throttling(self):
        """Gets the throttling of this Subscription.  # noqa: E501


        :return: The throttling of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._throttling

    @throttling.setter
    def throttling(self, throttling):
        """Sets the throttling of this Subscription.


        :param throttling: The throttling of this Subscription.  # noqa: E501
        :type: bool
        """

        self._throttling = throttling

    @property
    def user(self):
        """Gets the user of this Subscription.  # noqa: E501

        ID of the user that created the subscription  # noqa: E501

        :return: The user of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Subscription.

        ID of the user that created the subscription  # noqa: E501

        :param user: The user of this Subscription.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Subscription):
            return True

        return self.to_dict() != other.to_dict()
