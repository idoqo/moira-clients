# coding: utf-8

"""
    Moira Alert

    This is an API description for Moira Alert project. Please check https://github.com/moira-alert  # noqa: E501

    The version of the OpenAPI document: 2.5.1.47
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Trigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'desc': 'str',
        'targets': 'list[str]',
        'warn_value': 'float',
        'error_value': 'float',
        'trigger_type': 'str',
        'tags': 'list[str]',
        'ttl_state': 'str',
        'ttl': 'int',
        'sched': 'SubscriptionSched',
        'expression': 'str',
        'patterns': 'list[str]',
        'is_remote': 'bool',
        'mute_new_metrics': 'bool',
        'throttling': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'desc': 'desc',
        'targets': 'targets',
        'warn_value': 'warn_value',
        'error_value': 'error_value',
        'trigger_type': 'trigger_type',
        'tags': 'tags',
        'ttl_state': 'ttl_state',
        'ttl': 'ttl',
        'sched': 'sched',
        'expression': 'expression',
        'patterns': 'patterns',
        'is_remote': 'is_remote',
        'mute_new_metrics': 'mute_new_metrics',
        'throttling': 'throttling'
    }

    def __init__(self, id=None, name=None, desc=None, targets=None, warn_value=None, error_value=None, trigger_type=None, tags=None, ttl_state=None, ttl=None, sched=None, expression=None, patterns=None, is_remote=None, mute_new_metrics=None, throttling=None, local_vars_configuration=None):  # noqa: E501
        """Trigger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._desc = None
        self._targets = None
        self._warn_value = None
        self._error_value = None
        self._trigger_type = None
        self._tags = None
        self._ttl_state = None
        self._ttl = None
        self._sched = None
        self._expression = None
        self._patterns = None
        self._is_remote = None
        self._mute_new_metrics = None
        self._throttling = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if desc is not None:
            self.desc = desc
        if targets is not None:
            self.targets = targets
        if warn_value is not None:
            self.warn_value = warn_value
        if error_value is not None:
            self.error_value = error_value
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if tags is not None:
            self.tags = tags
        if ttl_state is not None:
            self.ttl_state = ttl_state
        if ttl is not None:
            self.ttl = ttl
        if sched is not None:
            self.sched = sched
        if expression is not None:
            self.expression = expression
        if patterns is not None:
            self.patterns = patterns
        if is_remote is not None:
            self.is_remote = is_remote
        if mute_new_metrics is not None:
            self.mute_new_metrics = mute_new_metrics
        if throttling is not None:
            self.throttling = throttling

    @property
    def id(self):
        """Gets the id of this Trigger.  # noqa: E501


        :return: The id of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trigger.


        :param id: The id of this Trigger.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Trigger.  # noqa: E501


        :return: The name of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Trigger.


        :param name: The name of this Trigger.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def desc(self):
        """Gets the desc of this Trigger.  # noqa: E501


        :return: The desc of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Trigger.


        :param desc: The desc of this Trigger.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def targets(self):
        """Gets the targets of this Trigger.  # noqa: E501


        :return: The targets of this Trigger.  # noqa: E501
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Trigger.


        :param targets: The targets of this Trigger.  # noqa: E501
        :type: list[str]
        """

        self._targets = targets

    @property
    def warn_value(self):
        """Gets the warn_value of this Trigger.  # noqa: E501


        :return: The warn_value of this Trigger.  # noqa: E501
        :rtype: float
        """
        return self._warn_value

    @warn_value.setter
    def warn_value(self, warn_value):
        """Sets the warn_value of this Trigger.


        :param warn_value: The warn_value of this Trigger.  # noqa: E501
        :type: float
        """

        self._warn_value = warn_value

    @property
    def error_value(self):
        """Gets the error_value of this Trigger.  # noqa: E501


        :return: The error_value of this Trigger.  # noqa: E501
        :rtype: float
        """
        return self._error_value

    @error_value.setter
    def error_value(self, error_value):
        """Sets the error_value of this Trigger.


        :param error_value: The error_value of this Trigger.  # noqa: E501
        :type: float
        """

        self._error_value = error_value

    @property
    def trigger_type(self):
        """Gets the trigger_type of this Trigger.  # noqa: E501


        :return: The trigger_type of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this Trigger.


        :param trigger_type: The trigger_type of this Trigger.  # noqa: E501
        :type: str
        """

        self._trigger_type = trigger_type

    @property
    def tags(self):
        """Gets the tags of this Trigger.  # noqa: E501


        :return: The tags of this Trigger.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Trigger.


        :param tags: The tags of this Trigger.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def ttl_state(self):
        """Gets the ttl_state of this Trigger.  # noqa: E501


        :return: The ttl_state of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._ttl_state

    @ttl_state.setter
    def ttl_state(self, ttl_state):
        """Sets the ttl_state of this Trigger.


        :param ttl_state: The ttl_state of this Trigger.  # noqa: E501
        :type: str
        """

        self._ttl_state = ttl_state

    @property
    def ttl(self):
        """Gets the ttl of this Trigger.  # noqa: E501


        :return: The ttl of this Trigger.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Trigger.


        :param ttl: The ttl of this Trigger.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def sched(self):
        """Gets the sched of this Trigger.  # noqa: E501


        :return: The sched of this Trigger.  # noqa: E501
        :rtype: SubscriptionSched
        """
        return self._sched

    @sched.setter
    def sched(self, sched):
        """Sets the sched of this Trigger.


        :param sched: The sched of this Trigger.  # noqa: E501
        :type: SubscriptionSched
        """

        self._sched = sched

    @property
    def expression(self):
        """Gets the expression of this Trigger.  # noqa: E501


        :return: The expression of this Trigger.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Trigger.


        :param expression: The expression of this Trigger.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def patterns(self):
        """Gets the patterns of this Trigger.  # noqa: E501


        :return: The patterns of this Trigger.  # noqa: E501
        :rtype: list[str]
        """
        return self._patterns

    @patterns.setter
    def patterns(self, patterns):
        """Sets the patterns of this Trigger.


        :param patterns: The patterns of this Trigger.  # noqa: E501
        :type: list[str]
        """

        self._patterns = patterns

    @property
    def is_remote(self):
        """Gets the is_remote of this Trigger.  # noqa: E501


        :return: The is_remote of this Trigger.  # noqa: E501
        :rtype: bool
        """
        return self._is_remote

    @is_remote.setter
    def is_remote(self, is_remote):
        """Sets the is_remote of this Trigger.


        :param is_remote: The is_remote of this Trigger.  # noqa: E501
        :type: bool
        """

        self._is_remote = is_remote

    @property
    def mute_new_metrics(self):
        """Gets the mute_new_metrics of this Trigger.  # noqa: E501


        :return: The mute_new_metrics of this Trigger.  # noqa: E501
        :rtype: bool
        """
        return self._mute_new_metrics

    @mute_new_metrics.setter
    def mute_new_metrics(self, mute_new_metrics):
        """Sets the mute_new_metrics of this Trigger.


        :param mute_new_metrics: The mute_new_metrics of this Trigger.  # noqa: E501
        :type: bool
        """

        self._mute_new_metrics = mute_new_metrics

    @property
    def throttling(self):
        """Gets the throttling of this Trigger.  # noqa: E501


        :return: The throttling of this Trigger.  # noqa: E501
        :rtype: int
        """
        return self._throttling

    @throttling.setter
    def throttling(self, throttling):
        """Sets the throttling of this Trigger.


        :param throttling: The throttling of this Trigger.  # noqa: E501
        :type: int
        """

        self._throttling = throttling

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trigger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Trigger):
            return True

        return self.to_dict() != other.to_dict()
