# coding: utf-8

"""
    Moira Alert

    This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>  # noqa: E501

    The version of the OpenAPI document: 2.5.1.48
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EventEventMessageMaintenance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'setup_user': 'str',
        'setup_time': 'int',
        'remove_user': 'str',
        'remove_time': 'int'
    }

    attribute_map = {
        'setup_user': 'setup_user',
        'setup_time': 'setup_time',
        'remove_user': 'remove_user',
        'remove_time': 'remove_time'
    }

    def __init__(self, setup_user=None, setup_time=None, remove_user=None, remove_time=None, local_vars_configuration=None):  # noqa: E501
        """EventEventMessageMaintenance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._setup_user = None
        self._setup_time = None
        self._remove_user = None
        self._remove_time = None
        self.discriminator = None

        if setup_user is not None:
            self.setup_user = setup_user
        if setup_time is not None:
            self.setup_time = setup_time
        if remove_user is not None:
            self.remove_user = remove_user
        if remove_time is not None:
            self.remove_time = remove_time

    @property
    def setup_user(self):
        """Gets the setup_user of this EventEventMessageMaintenance.  # noqa: E501


        :return: The setup_user of this EventEventMessageMaintenance.  # noqa: E501
        :rtype: str
        """
        return self._setup_user

    @setup_user.setter
    def setup_user(self, setup_user):
        """Sets the setup_user of this EventEventMessageMaintenance.


        :param setup_user: The setup_user of this EventEventMessageMaintenance.  # noqa: E501
        :type: str
        """

        self._setup_user = setup_user

    @property
    def setup_time(self):
        """Gets the setup_time of this EventEventMessageMaintenance.  # noqa: E501


        :return: The setup_time of this EventEventMessageMaintenance.  # noqa: E501
        :rtype: int
        """
        return self._setup_time

    @setup_time.setter
    def setup_time(self, setup_time):
        """Sets the setup_time of this EventEventMessageMaintenance.


        :param setup_time: The setup_time of this EventEventMessageMaintenance.  # noqa: E501
        :type: int
        """

        self._setup_time = setup_time

    @property
    def remove_user(self):
        """Gets the remove_user of this EventEventMessageMaintenance.  # noqa: E501


        :return: The remove_user of this EventEventMessageMaintenance.  # noqa: E501
        :rtype: str
        """
        return self._remove_user

    @remove_user.setter
    def remove_user(self, remove_user):
        """Sets the remove_user of this EventEventMessageMaintenance.


        :param remove_user: The remove_user of this EventEventMessageMaintenance.  # noqa: E501
        :type: str
        """

        self._remove_user = remove_user

    @property
    def remove_time(self):
        """Gets the remove_time of this EventEventMessageMaintenance.  # noqa: E501


        :return: The remove_time of this EventEventMessageMaintenance.  # noqa: E501
        :rtype: int
        """
        return self._remove_time

    @remove_time.setter
    def remove_time(self, remove_time):
        """Sets the remove_time of this EventEventMessageMaintenance.


        :param remove_time: The remove_time of this EventEventMessageMaintenance.  # noqa: E501
        :type: int
        """

        self._remove_time = remove_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventEventMessageMaintenance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventEventMessageMaintenance):
            return True

        return self.to_dict() != other.to_dict()
