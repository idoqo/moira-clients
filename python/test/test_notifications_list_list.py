# coding: utf-8

"""
    Moira Alert

    This is an API description for [Moira Alert project](https://moira.readthedocs.io/en/latest/overview.html). Please check <https://github.com/moira-alert/>  # noqa: E501

    The version of the OpenAPI document: 2.5.1.48
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.notifications_list_list import NotificationsListList  # noqa: E501
from openapi_client.rest import ApiException

class TestNotificationsListList(unittest.TestCase):
    """NotificationsListList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test NotificationsListList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.notifications_list_list.NotificationsListList()  # noqa: E501
        if include_optional :
            return NotificationsListList(
                event = openapi_client.models.event.Event(
                    trigger_event = True, 
                    timestamp = 1590741878, 
                    metric = 'carbon.agents.*.metricsReceived', 
                    value = 70, 
                    state = 'OK', 
                    trigger_id = '5ff37996-8927-4cab-8987-970e80d8e0a8', 
                    sub_id = '0', 
                    contact_id = '0', 
                    old_state = 'ERROR', 
                    msg = '0', 
                    event_message = openapi_client.models.event_event_message.Event_event_message(
                        maintenance = openapi_client.models.event_event_message_maintenance.Event_event_message_maintenance(
                            setup_user = '0', 
                            setup_time = 56, 
                            remove_user = '0', 
                            remove_time = 56, ), 
                        interval = 56, ), ), 
                trigger = openapi_client.models.trigger.Trigger(
                    id = '292516ed-4924-4154-a62c-ebe312431fce', 
                    name = 'Not enough disk space left', 
                    desc = 'check the size of /var/log', 
                    targets = ["devOps.my_server.hdd.freespace_mbytes"], 
                    warn_value = 5000, 
                    error_value = 1000, 
                    trigger_type = 'rising', 
                    tags = ["server","disk"], 
                    ttl_state = 'NODATA', 
                    ttl = 600, 
                    sched = openapi_client.models.subscription_sched.Subscription_sched(
                        days = [
                            openapi_client.models.subscription_sched_days.Subscription_sched_days(
                                enabled = True, 
                                name = 'Mon', )
                            ], 
                        tz_offset = -60, 
                        start_offset = 0, 
                        end_offset = 1439, ), 
                    expression = '0', 
                    patterns = [""], 
                    is_remote = False, 
                    mute_new_metrics = False, 
                    throttling = 0, ), 
                contact = openapi_client.models.contact.Contact(
                    id = '1dd38765-c5be-418d-81fa-7a5f879c2315', 
                    user = '0', 
                    type = 'mail', 
                    value = 'devops@example.com', ), 
                plotting = openapi_client.models.notifications_list_plotting.NotificationsList_plotting(
                    enabled = True, 
                    theme = '0', ), 
                throttled = False, 
                send_fail = 0, 
                timestamp = 1594471927
            )
        else :
            return NotificationsListList(
        )

    def testNotificationsListList(self):
        """Test NotificationsListList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
